trigger:
    branches:
      include:        
        - develop
        - release/*
  
pool:
  vmImage: "ubuntu-16.04"

variables: 
  BuildConfiguration: 'release'
  # nombre del archivo csproj
  name-project: "trifenix.exception"

  
# github ejecuta este build, para validar y ejecutar,
# es decir, dos veces
# esta instrucci칩n asigna que no se ejecute en el pull request (para validar).
# sino, que solo se ejecute al modificar la rama.
pr: none
  
steps:

  - task: gitversion/setup@0
    inputs:
      versionSpec: '5.1'
      includePrerelease: true
    displayName : "Configurando gitversion"

  - task: gitversion/execute@0
    inputs:
      useConfigFile: false      
    displayName: "generando la nueva versi칩n"
  
  # toma todos los proyectos que existan adem치s de quien tiene el nuget.
  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      feedsToUse: 'select'
      vstsFeed: '$(draft-feed)'      
      versioningScheme: byBuildNumber


  # genera paquete usando la versi칩n proporcionada por gitversion
  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack' 
    inputs: 
      command: pack
      packagesToPack: '**/$(name-project).csproj'       
      arguments: '--configuration $(BuildConfiguration) /p:Version=$(SemVer)' 
      versioningScheme: byEnvVar 
      versionEnvVar: SemVer

  # publica paquete para publicar.
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: drop
      publishLocation: 'container'
    displayName: "publish nuget"
